#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <time.h>

// Graph structure
typedef struct {
    int src, dest, weight;
} Edge;

// Function to perform Dijkstra's algorithm
void dijkstra(int **graph, int V, int src) {
    int dist[V]; // Output array dist[i] holds the shortest distance from src to j
    int sptSet[V]; // sptSet[j] is true if vertex j is included in the shortest path tree

    // Initialize distances and shortest path tree set
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = 0;
    }
    dist[src] = 0; // Distance from source to itself is 0

    // Find the shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        // Find the minimum distance vertex from the set of vertices not yet processed
        int minIndex = -1;
        int minValue = INT_MAX;
        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && dist[v] < minValue) {
                minValue = dist[v];
                minIndex = v;
            }
        }

        // Mark the picked vertex as processed
        sptSet[minIndex] = 1;

        // Update dist value of the adjacent vertices of the picked vertex
        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && graph[minIndex][v] && dist[minIndex] != INT_MAX && 
                dist[minIndex] + graph[minIndex][v] < dist[v]) {
                dist[v] = dist[minIndex] + graph[minIndex][v];
            }
        }
    }

    // Print the constructed distance array
    printf("Dijkstra's shortest distances from source %d:\n", src);
    for (int i = 0; i < V; i++) {
        printf("%d -> %d: %d\n", src, i, dist[i]);
    }
}

// Function to perform Bellman-Ford algorithm
void bellmanFord(Edge edges[], int V, int E, int src) {
    int dist[V];

    // Initialize distances from src to all other vertices as INFINITE
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
    }
    dist[src] = 0;

    // Relax all edges |V| - 1 times
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            if (dist[edges[j].src] != INT_MAX && 
                dist[edges[j].src] + edges[j].weight < dist[edges[j].dest]) {
                dist[edges[j].dest] = dist[edges[j].src] + edges[j].weight;
            }
        }
    }

    // Check for negative-weight cycles
    for (int j = 0; j < E; j++) {
        if (dist[edges[j].src] != INT_MAX && 
            dist[edges[j].src] + edges[j].weight < dist[edges[j].dest]) {
            printf("Graph contains negative weight cycle\n");
            return;
        }
    }

    // Print the distance array
    printf("Bellman-Ford shortest distances from source %d:\n", src);
    for (int i = 0; i < V; i++) {
        printf("%d -> %d: %d\n", src, i, dist[i]);
    }
}

// Main function
int main() {
    int V, E, src;

    // Example Graph
    printf("Enter number of vertices: ");
    scanf("%d", &V);
    printf("Enter number of edges: ");
    scanf("%d", &E);

    int **graph = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++) {
        graph[i] = (int *)malloc(V * sizeof(int));
        for (int j = 0; j < V; j++) {
            graph[i][j] = (i == j) ? 0 : INT_MAX; // Initialize graph with INFINITY
        }
    }

    Edge edges[E]; // To hold the edges for Bellman-Ford

    printf("Enter edges (src dest weight):\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d %d", &edges[i].src, &edges[i].dest, &edges[i].weight);
        graph[edges[i].src][edges[i].dest] = edges[i].weight; // Fill the adjacency matrix
    }

    printf("Enter source vertex: ");
    scanf("%d", &src);

    // Measure Dijkstra's execution time
    clock_t start = clock();
    dijkstra(graph, V, src);
    clock_t end = clock();
    double dijkstraTime = (double)(end - start) / CLOCKS_PER_SEC;

    // Measure Bellman-Ford execution time
    start = clock();
    bellmanFord(edges, V, E, src);
    end = clock();
    double bellmanFordTime = (double)(end - start) / CLOCKS_PER_SEC;

    printf("Dijkstra's Algorithm Time: %f seconds\n", dijkstraTime);
    printf("Bellman-Ford Algorithm Time: %f seconds\n", bellmanFordTime);

    // Free allocated memory
    for (int i = 0; i < V; i++) {
        free(graph[i]);
    }
    free(graph);

    return 0;
}
