#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to multiply matrices using traditional method
void traditionalMatrixMultiplication(int **A, int **B, int **C, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = 0;
            for (int k = 0; k < n; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

// Function to add two matrices
void add(int **A, int **B, int **C, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

// Function to subtract two matrices
void subtract(int **A, int **B, int **C, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

// Strassen's algorithm for matrix multiplication
void strassen(int **A, int **B, int **C, int n) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int k = n / 2;

    // Create submatrices
    int **A11 = (int **)malloc(k * sizeof(int *));
    int **A12 = (int **)malloc(k * sizeof(int *));
    int **A21 = (int **)malloc(k * sizeof(int *));
    int **A22 = (int **)malloc(k * sizeof(int *));
    int **B11 = (int **)malloc(k * sizeof(int *));
    int **B12 = (int **)malloc(k * sizeof(int *));
    int **B21 = (int **)malloc(k * sizeof(int *));
    int **B22 = (int **)malloc(k * sizeof(int *));
    int **M1 = (int **)malloc(k * sizeof(int *));
    int **M2 = (int **)malloc(k * sizeof(int *));
    int **M3 = (int **)malloc(k * sizeof(int *));
    int **M4 = (int **)malloc(k * sizeof(int *));
    int **M5 = (int **)malloc(k * sizeof(int *));
    int **M6 = (int **)malloc(k * sizeof(int *));
    int **M7 = (int **)malloc(k * sizeof(int *));
    int **temp1 = (int **)malloc(k * sizeof(int *));
    int **temp2 = (int **)malloc(k * sizeof(int *));
    
    for (int i = 0; i < k; i++) {
        A11[i] = (int *)malloc(k * sizeof(int));
        A12[i] = (int *)malloc(k * sizeof(int));
        A21[i] = (int *)malloc(k * sizeof(int));
        A22[i] = (int *)malloc(k * sizeof(int));
        B11[i] = (int *)malloc(k * sizeof(int));
        B12[i] = (int *)malloc(k * sizeof(int));
        B21[i] = (int *)malloc(k * sizeof(int));
        B22[i] = (int *)malloc(k * sizeof(int));
        M1[i] = (int *)malloc(k * sizeof(int));
        M2[i] = (int *)malloc(k * sizeof(int));
        M3[i] = (int *)malloc(k * sizeof(int));
        M4[i] = (int *)malloc(k * sizeof(int));
        M5[i] = (int *)malloc(k * sizeof(int));
        M6[i] = (int *)malloc(k * sizeof(int));
        M7[i] = (int *)malloc(k * sizeof(int));
        temp1[i] = (int *)malloc(k * sizeof(int));
        temp2[i] = (int *)malloc(k * sizeof(int));
    }

    // Divide A and B into submatrices
    for (int i = 0; i < k; i++) {
        for (int j = 0; j < k; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + k];
            A21[i][j] = A[i + k][j];
            A22[i][j] = A[i + k][j + k];
            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + k];
            B21[i][j] = B[i + k][j];
            B22[i][j] = B[i + k][j + k];
        }
    }

    // M1 = (A11 + A22) * (B11 + B22)
    add(A11, A22, temp1, k);
    add(B11, B22, temp2, k);
    strassen(temp1, temp2, M1, k);

    // M2 = (A21 + A22) * B11
    add(A21, A22, temp1, k);
    strassen(temp1, B11, M2, k);

    // M3 = A11 * (B12 - B22)
    subtract(B12, B22, temp2, k);
    strassen(A11, temp2, M3, k);

    // M4 = A22 * (B21 - B11)
    subtract(B21, B11, temp2, k);
    strassen(A22, temp2, M4, k);

    // M5 = (A11 + A12) * B22
    add(A11, A12, temp1, k);
    strassen(temp1, B22, M5, k);

    // M6 = (A21 - A11) * (B11 + B12)
    subtract(A21, A11, temp1, k);
    add(B11, B12, temp2, k);
    strassen(temp1, temp2, M6, k);

    // M7 = (A12 - A22) * (B21 + B22)
    subtract(A12, A22, temp1, k);
    add(B21, B22, temp2, k);
    strassen(temp1, temp2, M7, k);

    // C11 = M1 + M4 - M5 + M7
    add(M1, M4, temp1, k);
    subtract(temp1, M5, temp2, k);
    add(temp2, M7, C, k);

    // C12 = M3 + M5
    add(M3, M5, C + 0 * n + k, k);

    // C21 = M2 + M4
    add(M2, M4, C + k * n + 0, k);

    // C22 = M1 - M2 + M3 - M6
    add(M1, M3, temp1, k);
    subtract(temp1, M2, temp2, k);
    subtract(temp2, M6, C + k * n + k, k);

    // Free allocated memory
    for (int i = 0; i < k; i++) {
        free(A11[i]); free(A12[i]); free(A21[i]); free(A22[i]);
        free(B11[i]); free(B12[i]); free(B21[i]); free(B22[i]);
        free(M1[i]); free(M2[i]); free(M3[i]); free(M4[i]);
        free(M5[i]); free(M6[i]); free(M7[i]); free(temp1[i]);
        free(temp2[i]);
    }
    free(A11); free(A12); free(A21); free(A22);
    free(B11); free(B12); free(B21); free(B22);
    free(M1); free(M2); free(M3); free(M4);
    free(M5); free(M6); free(M7); free(temp1);
    free(temp2);
}

// Function to allocate a matrix
int **allocateMatrix(int n) {
    int **matrix = (int **)malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++) {
        matrix[i] = (int *)malloc(n * sizeof(int));
    }
    return matrix;
}

// Function to free a matrix
void freeMatrix(int **matrix, int n) {
    for (int i = 0; i < n; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

// Function to fill a matrix with random values
void fillMatrix(int **matrix, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            matrix[i][j] = rand() % 10; // Random values between 0 and 9
        }
    }
}

int main() {
    srand(time(0)); // Seed for random number generation
    int n = 128; // Size of the matrix (n x n)

    // Allocate and fill matrices
    int **A = allocateMatrix(n);
    int **B = allocateMatrix(n);
    int **C1 = allocateMatrix(n); // For traditional multiplication
    int **C2 = allocateMatrix(n); // For Strassen multiplication

    fillMatrix(A, n);
    fillMatrix(B, n);

    // Measure time for traditional matrix multiplication
    clock_t start = clock();
    traditionalMatrixMultiplication(A, B, C1, n);
    clock_t end = clock();
    double traditionalTime = (double)(end - start) / CLOCKS_PER_SEC;

    // Measure time for Strassen's matrix multiplication
    start = clock();
    strassen(A, B, C2, n);
    end = clock();
    double strassenTime = (double)(end - start) / CLOCKS_PER_SEC;

    printf("Time taken for Traditional Matrix Multiplication: %f seconds\n", traditionalTime);
    printf("Time taken for Strassen's Matrix Multiplication: %f seconds\n", strassenTime);

    // Free allocated memory
    freeMatrix(A, n);
    freeMatrix(B, n);
    freeMatrix(C1, n);
    freeMatrix(C2, n);

    return 0;
}
