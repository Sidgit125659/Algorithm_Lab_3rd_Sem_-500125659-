#include <stdio.h>
#include <stdlib.h>

// Structure for an item
typedef struct {
    int value;
    int weight;
    double ratio; // Value/Weight ratio
} Item;

// Function to compare items based on value-to-weight ratio (for greedy approach)
int compare(const void *a, const void *b) {
    Item *item1 = (Item *)a;
    Item *item2 = (Item *)b;
    return (item2->ratio - item1->ratio) > 0 ? 1 : -1; // Sort in descending order
}

// Greedy approach for Fractional Knapsack (for demonstration)
double fractionalKnapsack(Item items[], int n, int W) {
    qsort(items, n, sizeof(Item), compare);
    double totalValue = 0.0;

    for (int i = 0; i < n; i++) {
        if (items[i].weight <= W) {
            W -= items[i].weight;
            totalValue += items[i].value;
        } else {
            totalValue += items[i].value * ((double)W / items[i].weight);
            break;
        }
    }

    return totalValue;
}

// Dynamic Programming approach for 0/1 Knapsack
int knapsackDP(Item items[], int n, int W) {
    int K[n + 1][W + 1];

    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                K[i][w] = 0; // Base case
            else if (items[i - 1].weight <= w)
                K[i][w] = (items[i - 1].value + K[i - 1][w - items[i - 1].weight] > K[i - 1][w])
                              ? items[i - 1].value + K[i - 1][w - items[i - 1].weight]
                              : K[i - 1][w];
            else
                K[i][w] = K[i - 1][w];
        }
    }

    return K[n][W];
}

// Function to solve the Sum of Subset problem
int sumOfSubset(int set[], int n, int sum) {
    int dp[n + 1][sum + 1];

    // Initialize dp array
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= sum; j++) {
            if (j == 0)
                dp[i][j] = 1; // Sum 0 is always possible
            else if (i == 0)
                dp[i][j] = 0; // No items means no sum
            else if (set[i - 1] <= j)
                dp[i][j] = dp[i - 1][j] || dp[i - 1][j - set[i - 1]];
            else
                dp[i][j] = dp[i - 1][j];
        }
    }

    return dp[n][sum];
}

// Main function to test the above implementations
int main() {
    int W = 50; // Capacity of the knapsack
    Item items[] = {{60, 10, 0}, {100, 20, 0}, {120, 30, 0}};
    int n = sizeof(items) / sizeof(items[0]);

    // Calculate value-to-weight ratio
    for (int i = 0; i < n; i++) {
        items[i].ratio = (double)items[i].value / items[i].weight;
    }

    // Greedy approach (for Fractional Knapsack)
    double maxValue = fractionalKnapsack(items, n, W);
    printf("Greedy approach (Fractional Knapsack) maximum value: %.2f\n", maxValue);

    // Dynamic Programming approach (0/1 Knapsack)
    int maxValueDP = knapsackDP(items, n, W);
    printf("Dynamic Programming approach (0/1 Knapsack) maximum value: %d\n", maxValueDP);

    // Sum of Subset problem
    int set[] = {3, 34, 4, 12, 5, 2};
    int sum = 9;
    n = sizeof(set) / sizeof(set[0]);
    if (sumOfSubset(set, n, sum)) {
        printf("A subset with sum %d exists.\n", sum);
    } else {
        printf("No subset with sum %d exists.\n", sum);
    }

    return 0;
}
