#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#define BASE 256
#define PRIME 101

// Naive String Matching Algorithm
int naiveStringMatch(const char *text, const char *pattern) {
    int n = strlen(text);
    int m = strlen(pattern);
    int count = 0;

    for (int i = 0; i <= n - m; i++) {
        int j;
        for (j = 0; j < m; j++) {
            if (text[i + j] != pattern[j])
                break;
        }
        if (j == m) {
            count++;
        }
    }
    return count;
}

// Rabin-Karp Algorithm
int rabinKarp(const char *text, const char *pattern) {
    int n = strlen(text);
    int m = strlen(pattern);
    int patternHash = 0;
    int textHash = 0;
    int h = 1;
    int count = 0;

    for (int i = 0; i < m - 1; i++) {
        h = (h * BASE) % PRIME;
    }

    // Calculate hash value of the pattern and the first window of text
    for (int i = 0; i < m; i++) {
        patternHash = (BASE * patternHash + pattern[i]) % PRIME;
        textHash = (BASE * textHash + text[i]) % PRIME;
    }

    // Slide the pattern over text one by one
    for (int i = 0; i <= n - m; i++) {
        // Check hash values
        if (patternHash == textHash) {
            int j;
            for (j = 0; j < m; j++) {
                if (text[i + j] != pattern[j])
                    break;
            }
            if (j == m) {
                count++;
            }
        }

        // Calculate hash value for the next window
        if (i < n - m) {
            textHash = (BASE * (textHash - text[i] * h) + text[i + m]) % PRIME;
            if (textHash < 0) {
                textHash += PRIME;
            }
        }
    }
    return count;
}

// Knuth-Morris-Pratt Algorithm
void computeLPSArray(const char *pattern, int *lps) {
    int length = 0; 
    int i = 1; 
    lps[0] = 0; 

    while (i < strlen(pattern)) {
        if (pattern[i] == pattern[length]) {
            length++;
            lps[i] = length;
            i++;
        } else {
            if (length != 0) {
                length = lps[length - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

int kmp(const char *text, const char *pattern) {
    int n = strlen(text);
    int m = strlen(pattern);
    int lps[m];
    computeLPSArray(pattern, lps);
    int i = 0; // index for text
    int j = 0; // index for pattern
    int count = 0;

    while (i < n) {
        if (pattern[j] == text[i]) {
            i++;
            j++;
        }
        if (j == m) {
            count++;
            j = lps[j - 1];
        } else if (i < n && pattern[j] != text[i]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }
    return count;
}

// Function to measure the time taken by an algorithm
double measureTime(int (*func)(const char *, const char *), const char *text, const char *pattern) {
    clock_t start = clock();
    int count = func(text, pattern);
    clock_t end = clock();
    double timeSpent = (double)(end - start) / CLOCKS_PER_SEC;
    return timeSpent;
}

// Main function
int main() {
    const char *text = "ABABDABACDABABCABABABABABABACABAB";
    const char *pattern = "ABAB";
    
    // Measure execution times
    double naiveTime = measureTime(naiveStringMatch, text, pattern);
    double rabinTime = measureTime(rabinKarp, text, pattern);
    double kmpTime = measureTime(kmp, text, pattern);

    // Output results
    printf("Naive String Matching found %d occurrences in %.6f seconds.\n", naiveStringMatch(text, pattern), naiveTime);
    printf("Rabin-Karp found %d occurrences in %.6f seconds.\n", rabinKarp(text, pattern), rabinTime);
    printf("KMP found %d occurrences in %.6f seconds.\n", kmp(text, pattern), kmpTime);

    return 0;
}
