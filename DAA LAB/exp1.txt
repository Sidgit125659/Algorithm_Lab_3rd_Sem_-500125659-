#include <stdio.h>
#include <stdlib.h>

// Node structure for the BST
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Recursive insertion in BST
Node* insertRecursive(Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insertRecursive(root->left, data);
    } else if (data > root->data) {
        root->right = insertRecursive(root->right, data);
    }
    return root;
}

// Iterative insertion in BST
Node* insertIterative(Node* root, int data) {
    Node* newNode = createNode(data);
    if (root == NULL) {
        return newNode;
    }

    Node* current = root;
    Node* parent = NULL;

    while (current != NULL) {
        parent = current;
        if (data < current->data) {
            current = current->left;
        } else if (data > current->data) {
            current = current->right;
        } else {
            free(newNode); // Duplicate values are not allowed
            return root;
        }
    }

    if (data < parent->data) {
        parent->left = newNode;
    } else {
        parent->right = newNode;
    }

    return root;
}

// Function to print the BST in-order
void inOrder(Node* root) {
    if (root != NULL) {
        inOrder(root->left);
        printf("%d ", root->data);
        inOrder(root->right);
    }
}

// Main function to test the implementation
int main() {
    Node* root = NULL;

    // Testing recursive insertion
    root = insertRecursive(root, 5);
    root = insertRecursive(root, 3);
    root = insertRecursive(root, 7);
    root = insertRecursive(root, 2);
    root = insertRecursive(root, 4);
    printf("In-order traversal after recursive insertion: ");
    inOrder(root);
    printf("\n");

    // Resetting root for iterative insertion
    root = NULL;

    // Testing iterative insertion
    root = insertIterative(root, 5);
    root = insertIterative(root, 3);
    root = insertIterative(root, 7);
    root = insertIterative(root, 2);
    root = insertIterative(root, 4);
    printf("In-order traversal after iterative insertion: ");
    inOrder(root);
    printf("\n");

    return 0;
}
