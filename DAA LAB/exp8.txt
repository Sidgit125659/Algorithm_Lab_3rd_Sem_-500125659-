#include <stdio.h>

void printSubset(int subset[], int n) {
    printf("{ ");
    for (int i = 0; i < n; i++) {
        printf("%d ", subset[i]);
    }
    printf("}\n");
}

// Function to check if there's a subset with the given sum using backtracking
void sumOfSubset(int set[], int n, int sum, int subset[], int subsetSize, int currentIndex) {
    // Base case: if the remaining sum is 0, a valid subset is found
    if (sum == 0) {
        printSubset(subset, subsetSize);
        return;
    }
    // Base case: if we've considered all elements or the sum becomes negative
    if (currentIndex >= n || sum < 0) {
        return;
    }

    // Include the current element in the subset
    subset[subsetSize] = set[currentIndex];
    sumOfSubset(set, n, sum - set[currentIndex], subset, subsetSize + 1, currentIndex + 1);

    // Exclude the current element from the subset
    sumOfSubset(set, n, sum, subset, subsetSize, currentIndex + 1);
}

// Main function
int main() {
    int set[] = {3, 34, 4, 12, 5, 2};
    int sum = 9;
    int n = sizeof(set) / sizeof(set[0]);
    int subset[n]; // Array to store current subset

    printf("Subsets with sum %d are:\n", sum);
    sumOfSubset(set, n, sum, subset, 0, 0);

    return 0;
}
