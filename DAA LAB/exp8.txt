#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <time.h>

// Structure to represent an item
typedef struct {
    int value;
    int weight;
} Item;

// Dynamic Programming Approach
int knapsackDP(Item items[], int n, int W) {
    int K[n + 1][W + 1];

    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (items[i - 1].weight <= w)
                K[i][w] = (items[i - 1].value + K[i - 1][w - items[i - 1].weight] > K[i - 1][w])
                              ? items[i - 1].value + K[i - 1][w - items[i - 1].weight]
                              : K[i - 1][w];
            else
                K[i][w] = K[i - 1][w];
        }
    }

    return K[n][W];
}

// Backtracking Approach
int knapsackBacktracking(Item items[], int n, int W, int index, int currentWeight, int currentValue) {
    // Base case: if the current weight exceeds W or all items are considered
    if (currentWeight > W || index == n) {
        return currentValue;
    }

    // Include the current item
    int include = knapsackBacktracking(items, n, W, index + 1, currentWeight + items[index].weight, currentValue + items[index].value);

    // Exclude the current item
    int exclude = knapsackBacktracking(items, n, W, index + 1, currentWeight, currentValue);

    // Return the maximum of the two choices
    return (include > exclude) ? include : exclude;
}

// Branch and Bound Approach
typedef struct {
    int level;      // Current level in the tree
    int value;      // Total value of items so far
    int weight;     // Total weight of items so far
    float bound;    // Upper bound of maximum value
} Node;

float calculateBound(Node node, int n, int W, Item items[]) {
    // If weight is over the knapsack capacity, return 0
    if (node.weight >= W) return 0;

    // Initialize bound
    float bound = node.value;

    // Start including items in the knapsack until the weight is exceeded
    int j = node.level + 1;
    int totalWeight = node.weight;

    while (j < n && totalWeight + items[j].weight <= W) {
        totalWeight += items[j].weight;
        bound += items[j].value;
        j++;
    }

    // If there are still items left, take the fraction of the next item
    if (j < n) {
        bound += (W - totalWeight) * (float)items[j].value / items[j].weight;
    }

    return bound;
}

int knapsackBranchBound(Item items[], int n, int W) {
    // Sort items by value-to-weight ratio
    for (int i = 0; i < n; i++) {
        items[i].value = items[i].value / items[i].weight;
    }

    // Create a queue for BFS
    Node queue[100];
    int front = 0, rear = 0;

    // Initialize the root node
    Node root = { -1, 0, 0, 0.0 };
    root.bound = calculateBound(root, n, W, items);
    queue[rear++] = root;

    int maxValue = 0;

    // BFS traversal
    while (front < rear) {
        Node curr = queue[front++];
        
        // If this node's level is the last, update maxValue
        if (curr.level == n - 1) continue;

        // Consider the next item
        Node next = { curr.level + 1, curr.value + items[curr.level + 1].value, curr.weight + items[curr.level + 1].weight };
        
        // Check if the item can be included
        if (next.weight <= W && next.value > maxValue) {
            maxValue = next.value;
        }

        // Calculate the bound for the next node
        next.bound = calculateBound(next, n, W, items);
        if (next.bound > maxValue) {
            queue[rear++] = next; // Enqueue the left child
        }

        // Consider excluding the next item
        next = (Node){ curr.level + 1, curr.value, curr.weight };
        next.bound = calculateBound(next, n, W, items);
        if (next.bound > maxValue) {
            queue[rear++] = next; // Enqueue the right child
        }
    }

    return maxValue;
}

// Main function
int main() {
    int W = 50; // Capacity of the knapsack
    Item items[] = {{60, 10}, {100, 20}, {120, 30}};
    int n = sizeof(items) / sizeof(items[0]);

    // Measure DP execution time
    clock_t start = clock();
    int maxValueDP = knapsackDP(items, n, W);
    clock_t end = clock();
    double dpTime = (double)(end - start) / CLOCKS_PER_SEC;

    // Measure Backtracking execution time
    start = clock();
    int maxValueBT = knapsackBacktracking(items, n, W, 0, 0, 0);
    end = clock();
    double btTime = (double)(end - start) / CLOCKS_PER_SEC;

    // Measure Branch and Bound execution time
    start = clock();
    int maxValueBB = knapsackBranchBound(items, n, W);
    end = clock();
    double bbTime = (double)(end - start) / CLOCKS_PER_SEC;

    // Output results
    printf("Dynamic Programming maximum value: %d\n", maxValueDP);
    printf("Backtracking maximum value: %d\n", maxValueBT);
    printf("Branch and Bound maximum value: %d\n", maxValueBB);
    printf("Dynamic Programming Time: %f seconds\n", dpTime);
    printf("Backtracking Time: %f seconds\n", btTime);
    printf("Branch and Bound Time: %f seconds\n", bbTime);

    return 0;
}
