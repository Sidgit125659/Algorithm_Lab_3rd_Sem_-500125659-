#include <stdio.h>
#include <limits.h>

// Function to calculate the minimum number of multiplications needed
void matrixChainMultiplication(int p[], int n) {
    // m[i][j] is the minimum number of multiplications needed to multiply
    // matrices from i to j
    int m[n][n];
    
    // s[i][j] is the index of the matrix after which the product is split
    int s[n][n];

    // cost of multiplying one matrix is zero
    for (int i = 1; i < n; i++) {
        m[i][i] = 0;
    }

    // l is the chain length
    for (int l = 2; l < n; l++) {
        for (int i = 1; i <= n - l; i++) {
            int j = i + l - 1;
            m[i][j] = INT_MAX;

            // Try different split points
            for (int k = i; k < j; k++) {
                int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (q < m[i][j]) {
                    m[i][j] = q;
                    s[i][j] = k; // Store the split point
                }
            }
        }
    }

    // Print the optimal parenthesization
    printf("Minimum number of multiplications is %d\n", m[1][n - 1]);
    printf("Optimal Parenthesization: ");
    printOptimalParenthesization(s, 1, n - 1);
    printf("\n");
}

// Function to print the optimal parenthesization
void printOptimalParenthesization(int s[][10], int i, int j) {
    if (i == j) {
        printf("A%d", i);
    } else {
        printf("(");
        printOptimalParenthesization(s, i, s[i][j]);
        printOptimalParenthesization(s, s[i][j] + 1, j);
        printf(")");
    }
}

int main() {
    // Example matrix dimensions (A1: 10x20, A2: 20x30, A3: 30x40, A4: 40x30)
    int p[] = {10, 20, 30, 40, 30}; // Dimensions array
    int n = sizeof(p) / sizeof(p[0]); // Number of matrices

    matrixChainMultiplication(p, n);

    return 0;
}
